name: CI-nightly
on:
  push:
    branches: [master, main]
    tags: ["*"]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ (github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main') || github.run_number }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

env:
  PYTHON: ~
jobs:
  test:
    name: Julia ${{ matrix.version }} - t=${{ matrix.threads }} - jet=${{ matrix.jet }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            version: alpha
            threads: 2
            jet: 'false'
          - os: ubuntu-latest
            arch: x64
            version: '1'
            threads: 2
            jet: 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/install-juliaup@v2
        with:
          channel: ${{ matrix.version }}~${{ matrix.arch }}

      - name: Full Pkg Operations
        run: |
          julia -e '
          import Pkg

          try
              Pkg.Registry.rm("General")
          catch e
              @warn "Failed to remove General registry: $e"
          end
          Pkg.Registry.add("General")
          Pkg.Registry.update()

          @info "Pkg.Registry.status() output:"
          println(Pkg.Registry.status())
          @info "Checking QuantumSavory in registry status:"
          try
              Pkg.Registry.status("QuantumSavory")
          catch e
              @error "Failed to get status for QuantumSavory from registry: $e"
          end

          Pkg.activate(".")
          try
              Pkg.instantiate()
          catch e
              @error "Failed to instantiate root project!" exception=(e, catch_backtrace())
              rethrow(e)
          end

          Pkg.activate("test")
          try
              Pkg.instantiate()
          catch e
              @error "Failed to instantiate test environment!" exception=(e, catch_backtrace())
              rethrow(e)
          end

          test_pkg_list = Pkg.installed()
          if "QuantumSavory" in keys(test_pkg_list)
              @info "QuantumSavory found in test environment: $(test_pkg_list["QuantumSavory"].version)"
          else
              @error "QuantumSavory NOT found in test environment after instantiation."
              error("Critical: QuantumSavory not found.")
          end

          Pkg.build()
          Pkg.test("QuantumSymbolics"; coverage=true, test_args=["--threads", "$(ENV["JULIA_NUM_THREADS"])"])
          '
        env:
          JULIA_NUM_THREADS: ${{ matrix.threads }}
          JET_TEST: ${{ matrix.jet }} # This line is specific to ci-julia-nightly.yml

      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v5
        with:
          file: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
